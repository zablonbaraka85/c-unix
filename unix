#include <stdio.h>
#include <dirent.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
int main(int argc, char *argv[])
{
  char path[MAX_FILE_NAME_LEN] = {0};
  struct stat statBuf;
  if (argc != 2) {
    printf("Usage: './gls <directory_name>'\n");
    exit(0);
  }
  if (stat(argv[(argc - 1)], &statBuf) < 0) {
    printf("Error: No such file exists.\n");
    exit(0);
  }
  DIR           *d;
  struct dirent *dir;
  //char currentPath[FILENAME_MAX];
  d = opendir(argv[1]);

  while ((dir = readdir(d)) != NULL) {
   memset(path, 0, MAX_FILE_NAME_LEN);
   snprintf(path,MAX_FILE_NAME_LEN,"%s%s",argv[1],dir->d_name);
    // FILENAME_MAX;

   if (stat(path, &statBuf) < 0) {
     printf("Error: No such file exists.\n");
     continue;
   }                                                                                    

    if(S_ISREG(statBuf.st_mode)) {

      printf("| %s (regular file - %d - !checksum!)\n", dir->d_name, (int)statBuf.st_size);            
    }

    if(S_ISDIR(statBuf.st_mode)) {
      printf("| %s (directory - size)\n", dir->d_name);
    }

    if(S_ISLNK(statBuf.st_mode)) {
      printf("| %s (symbolic link - points to !!!\n", dir->d_name);
    }

    if(S_ISFIFO(statBuf.st_mode)) {
      printf("| %s (fifo (named pipe))\n", dir->d_name);
    }
  }
  closedir(d);
  return(0);
}
int cwdloop(void)
{
   DIR           * dirp;
   struct stat     buff;
   struct dirent * dptr;
   char            filename[1024];
   char            dirname[1024];
   if (!(getcwd(dirname, 1024)))
   {
       perror("getcwd");
       return(1);
   };

   dirp = opendir(dirname);
   if (!(dirp))
   {
      perror("opendir()");
      return(1);
   };

   while ((dptr = readdir(dirp)))
   {
      snprintf(filename, 1024, "%s/%s", dirname, dptr->d_name);
      if (stat(filename, &buff) != 0)
      {
         perror("stat()");
         return(1);
      } else {
         printf("size: %u\n", (unsigned)buff.st_size);
      };
   };
   closedir(dirp);
   return(0);
}
static void logstat(struct stat *sp)
{
    int mode = sp->st_mode;
    if (sp->st_size > 1000000000)
        printf("  File Size:        %lluGB\n", sp->st_size / 1000000000);
    else if(sp->st_size > 1000000)
        printf("  File Size:        %lluMB\n", sp->st_size / 1000000);
    else
        printf("  File Size:        %llu bytes\n", sp->st_size);
    printf("  Number of Links:  %d\n", sp->st_nlink);
    printf("  File inode:       %d\n", sp->st_ino);
    printf("  File type:        ");
    switch (mode & S_IFMT) {
    case S_IFBLK:
        printf("BLK\n");
        break;
    case S_IFCHR:
        printf("CHR\n");
        break;
    case S_IFDIR:
        printf("DIR\n");
        break;
    case S_IFIFO:
        printf("FIFO\n");
        break;
    case S_IFLNK:
        printf("LINK\n");
        break;
    case S_IFREG:
        printf("REG\n");
        break;
    case S_IFSOCK:
        printf("SOCK\n");
        break;
    }
    printf("  File Permissions: ");
    printf( (S_ISDIR(sp->st_mode)  ? "d" : "-");
    printf( (sp->st_mode & S_IRUSR) ? "r" : "-");
    printf( (sp->st_mode & S_IWUSR) ? "w" : "-");
    printf( (sp->st_mode & S_IXUSR) ? "x" : "-");
    printf( (sp->st_mode & S_IRGRP) ? "r" : "-");
    printf( (sp->st_mode & S_IWGRP) ? "w" : "-");
    printf( (sp->st_mode & S_IXGRP) ? "x" : "-");
    printf( (sp->st_mode & S_IROTH) ? "r" : "-");
    printf( (sp->st_mode & S_IWOTH) ? "w" : "-");
    printf( (sp->st_mode & S_IXOTH) ? "x" : "-");
    printf("\n\n");
}